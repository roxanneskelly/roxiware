<script type="text/template" id="media_upload_template">
<%= 
    content_tag(:div, :id=>"media_upload") do
        content_tag(:div, :id=>"image_preview_pane") do
            content_tag(:div, :id=>"image_preview_row") do
                content_tag(:div, :id=>"image_toolbar") do
                    content_tag(:ul) do
                        content_tag(:li, content_tag(:a, content_tag(:span, "", :class=>"icon-crop"), :id=>"crop", :title=>"Crop")) +
                        content_tag(:li, content_tag(:a, content_tag(:span, "", :class=>"icon-spinner-6"), :id=>"rotate", :title=>"Rotate"))
                    end 
                end +
                content_tag(:div, tag(:img, :id=>"image_preview_image") + tag(:img, :id=>"image_preview_crop"), :id=>"image_preview")
            end
        end +
        content_tag(:div, :id=>"image_target") do
            content_tag(:div, :id=>"media_types") do
            end +
            content_tag(:div, "", :id=>"drop_help") +
            content_tag(:div, "", :id=>"upload_drop_area") +
            content_tag(:div, :id=>"upload_toolbar") do
                content_tag(:div, :id=>"url_section") do
                    text_field_tag(:image_url, "", :id=>"image_url", :watermark=>"URL", :title=>"Type in the URL to your image here") +
                    content_tag(:span, "", :class=>"icon-link")
                end
            end +
            content_tag(:div, "", :class=>"spinner-icon spinner-upload") +
            content_tag(:a, "Cancel", :id=>"upload_cancel") +
            content_tag(:div, content_tag(:div, "", :id=>"progress"), :id=>"progress_bar")
        end
     end
%>
</script>

<script>

$.roxiware.media_upload = {
    conf: {
        width:null,
        height:null,
        multiple:false,
        image:true,
        video:false,
        audio:false,
        onEdit:function() {},
        dropHelp:"Click this field or drop your files here."
    }
}

function MediaUpload(target, conf) {
    var self=this;
    var media_dialog = $(target).prepend($("#media_upload_template").text());

     media_dialog.find("#image_toolbar #rotate").click(function() {
        self.angle = (self.angle + 1) % 4;
        media_dialog.find("#image_preview #image_preview_image").rotate(self.angle*90);
        self.setImageSize();
    });

    media_dialog.find("#image_preview #image_preview_image").load(function() {
        self.imageWidth = this.width;
        self.imageHeight = this.height;
        var img_preview_crop = media_dialog.find("#image_preview_crop");
        var aspect_ratio = null;
        var img_area_options =  {instance:true, handles:true, parent:media_dialog.find("#image_preview")};
        img_area_options.imageHeight = this.height;
        img_area_options.imageWidth = this.width;
        img_area_options.x1 = 0;
        img_area_options.y1 = 0;
        img_area_options.x2 = this.width;
        img_area_options.y2 = this.height;
        img_area_options.hide=true;
        if(conf.width || conf.height) {
            img_area_options.show=true;
            // constrain by an aspect ratio or size
            if(conf.height) {
                img_area_options.y2 = conf.height;
            }
            if(conf.width) {
                img_area_options.x2 = conf.width;
                aspect_ratio=img_area_options.imageWidth/img_area_options.imgHeight;
                media_dialog.find("#image_preview #image_preview_image").css("max-width", conf.width+"px").css("width", "100%");
            }
            if(conf.width && conf.height) {
                img_area_options.aspectRatio = conf.width+":"+conf.height;
                aspect_ratio = conf.width/conf.height;
            }
            img_area_options.show = true;
            img_area_options.hide = false;
            img_area_options.x2 = Math.min(img_area_options.imageWidth, conf.width);
            img_area_options.y2 = Math.min(img_area_options.imageHeight, conf.height);
            if (img_area_options.x2 < img_area_options.y2 * aspect_ratio) {
                img_area_options.x2 = Math.min(img_area_options.imageWidth,
                img_area_options.y2 * aspect_ratio);
                img_area_options.y2 = Math.min(img_area_options.imageHeight,
                img_area_options.x2 / aspect_ratio);
            }
            else {
                img_area_options.y2 = Math.min(img_area_options.imageHeight,
                img_area_options.x2 / aspect_ratio);
                img_area_options.x2 = Math.min(img_area_options.imageWidth,
                img_area_options.y2 * aspect_ratio);
            }
            media_dialog.find("#image_toolbar #crop").addClass("selected");
        }
        else {
            img_area_options.hide=true;
        }
        img_preview_crop.imgAreaSelect({remove:true});
        ias = img_preview_crop.imgAreaSelect(img_area_options);
        ias.update();
        self.setImageSize();
        $("#image_preview_pane").animate({opacity:1}, 100);

    });
    if(!(conf.width || conf.height)) {
        media_dialog.find("#image_toolbar #crop").click(function() {
            $(this).toggleClass("selected");
            ias = media_dialog.find("#image_preview #image_preview_crop").imgAreaSelect({instance:true});
            if($(this).is(".selected")) {
                ias.setOptions({show:true});
            }
            else {
                ias.setOptions({hide:true});
            }
        });
     }


     media_dialog.find("#image_target").on("complete", function(event, id, name, json_data) {
        if(json_data["success"]) {
            self.set_media(json_data["url"]);
        }
        else {
            $.alert(json_data["error"]);
        }
     })
     .on("allComplete", function(event) {
        media_dialog.find("#media_upload").removeClass("uploading").addClass("edit_image");
     })
     .on("submit", function(event, id, name) {
         // replace upload button with progress bar
         media_dialog.find("div#progress_bar div#progress").css("width", "0%");
         media_dialog.find("#media_upload").addClass("uploading");
     })
     .on("progress", function(event, id, name, loaded, total) {
         var progress = String(Math.round((loaded*90)/total));
         media_dialog.find("div#progress_bar div#progress").css("width", progress + "%");
     })
     .on("cancel", function() {
         media_dialog.find("#media_upload").removeClass("uploading");
     });

     media_dialog.find("#upload_cancel").click(function(e) {
         media_dialog.find("#image_target").fineUploader("cancel");
     });

     var csrf_token = $('meta[name="csrf-token"]').attr('content');
     var csrf_param = $('meta[name="csrf-param"]').attr('content');
     var upload_params = {asset_type:"image"};
     if (csrf_param !== undefined && csrf_token !== undefined) {
         upload_params[csrf_param] = csrf_token;
     }
     var extensions = [];
     if(conf.image) {
        extensions = extensions.concat(["jpg", "png", "jpeg", "gif"]);
        media_dialog.find("#media_types").append("<span class='icon-image'>");
     }
     if(conf.video) {
         extensions = extensions.concat(["mp4", "mov"]);
         media_dialog.find("#media_types").append("<span class='icon-video'>");
     }
    
     if(conf.audio) {
         extensions = extensions.concat(["mp3"]);
         media_dialog.find("#media_types").append("<span class='icon-volume-high-2'>");
     }
     if(conf.dropHelp) {
        media_dialog.find("#drop_help").text(conf.dropHelp);
     }

     media_dialog.find("#image_target").fineUploader( {
         uploaderType: 'basic',
         button:media_dialog.find("#upload_drop_area"),
         debug:true,
         multiple: conf.multiple,
         camera: {
             ios: !conf.multiple,
         },
         request: {
             endpoint: "/asset.json",
             params: upload_params
         },
         validation: {
             allowedExtensions: extensions
         },
         showMessage: function(message) {
             $.alert(message);
         },
         sizeLimit: 0,
         minSizeLimit: 0
     });
     $.extend(self, {
         media_dialog:media_dialog,
         media_url:null,
         angle:0,
         imageWidth:0,
         imageHeight:0,
         setImageSize: function() {
             var image=self.media_dialog.find("#image_preview #image_preview_image");
             var image_crop=self.media_dialog.find("#image_preview #image_preview_crop");
             var full_width = self.media_dialog.innerWidth()-self.media_dialog.find("#image_toolbar").innerWidth();

             var previewImageWidth=Math.max(full_width, full_width*self.imageHeight/self.imageWidth);
             var previewImageHeight=previewImageWidth*self.imageHeight/self.imageWidth;

             image.css("width", previewImageWidth+"px"); 
             image.css("height", previewImageHeight+"px");

             if(self.angle & 1) {
                 image_crop.css("height", previewImageWidth+"px"); 
                 image_crop.css("width", previewImageHeight+"px");

                 // need to offset because transform works off of native image size
                 image.css("left",((previewImageHeight/2) - (previewImageWidth/2))+"px");
                 image.css("top",((previewImageWidth/2) - (previewImageHeight/2))+"px");
                 media_dialog.find("#image_preview").css("height", previewImageWidth+"px");
                 media_dialog.find("#image_preview").css("width", previewImageHeight+"px");
             }
             else {
                 image_crop.css("width", previewImageWidth+"px"); 
                 image_crop.css("height", previewImageHeight+"px");
                 image.css("left","");
                 image.css("top","");

                 media_dialog.find("#image_preview").css("height", previewImageHeight+"px");
                 media_dialog.find("#image_preview").css("width", previewImageWidth+"px");
             }
         },
         set_media:function(set_media_url) {
             media_dialog.find("div#progress_section").hide();
             media_dialog.find("div#url_section input").val(set_media_url).removeClass("watermark");
             media_dialog.find("#media_upload").removeClass("uploading").addClass("edit_image");
             media_dialog.find("#image_preview #image_preview_image").attr("src", set_media_url);
             self.media_url=set_media_url;
             conf.onEdit();
         },
         // process cropping, etc.
         process:function(callback) {
             var ias_conf = {instance:true};
             ias = media_dialog.find("#image_preview img").imgAreaSelect(ias_conf);
             selection = ias.getSelection(false);
             media_dialog.find("#image_preview img").imgAreaSelect({remove:true});
             // if we're not doing any processing, just do the callback
             if (!(selection.width && selection.height)) {
                 callback(self.media_url);
                 return;
             }

             // tell asset manager to generate an image with appropriate processing
             var create_params = { url:self.media_url, asset_type:"image" };

             if(conf.image) {
                 create_params.asset_type = "image";
             }
             else if(conf.video) {
                 create_params.asset_type = "video";
             }
             else if(conf.audio) {
                 create_params.asset_type = "audio";
             }
             if(selection.width && selection.height) {
                 create_params.crop = {
                     x:selection.x1,
                     y:selection.y1,
                     width:selection.width,
                     height:selection.height
                 }
             }
             if(conf.width) {
                 create_params.width = conf.width;
             }
             if(conf.height) {
                 create_params.height = conf.height;
             }
             $.ajaxSetParamsJSON("/asset.json", create_params, {
                 method:"POST",
                 success:function(json_data) {
                     callback(json_data.url);
                 }
             });
         }
    });
}

$.fn.media_upload = function(options) {
	var cm_api = null;
	this.each(function() {
		cm_api = $(this).data("media_upload");
		if(!cm_api) {
		    var conf = $.extend(true, {}, $.roxiware.media_upload.conf, options);
		    cm_api = new MediaUpload($(this), conf);
		    $(this).data("media_upload", cm_api);
		}
	    });
      return  cm_api;
}

//$(function() {
//   var changeSetTimeout = null;
//   $("input#image_url").bind("input propertychange", function() {
//       $("button[name=save]").button("enable");
//       var image_url = $(this).val();
//       if(changeSetTimeout) {
//           clearTimeout(changeSetTimeout);
//       }
//       changeSetTimeout = setTimeout(function() {
//          clearTimeout(changeSetTimeout);
//          set_image(image_url);
//          changeSetTimeout = null;
//       }, 1000);
//   });
//});
</script>
