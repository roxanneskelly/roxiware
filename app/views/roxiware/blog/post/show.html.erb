<%= content_tag(:article, :class=>"post_listing") do 
   render(:partial=>"roxiware/blog/post/post", :locals=>{:post=>@post, :index=>false, :show_full_content=>true, :show_full_header=>true}) + 
   content_tag(:div, :class=>"post_footer") do
       result = "".html_safe
       if can?(:read_comments, @post) 
	   result += content_tag(:a, :href=>@post.post_link+"#comments", :class=>"comments_link") do 
               content_tag(:div, @post.comment_count, :class=>((@post.comment_count == 1) ? "comments_count comments_singular" : "comments_count comments_plural")) +
	       (can?(:edit, @post) ? content_tag(:div, @post.pending_comment_count, :class=>((@post.pending_comment_count == 1) ? "pending_comments_count comments_singular" : "pending_comments_count comments_plural")) : "")
           end
	   result += render(:partial=>"roxiware/shared/comment_form", :locals=>{:additional_fields=>""}) if (can?(:comment, @post) && @show_comments)
           result += content_tag(:a, "", :name=>"comments")
	   result += content_tag(:div, raw(Roxiware::CommentHelper.display_comments(@comments, :allow_reply=>can?(:comment, @post), :allow_edit=>can?(:edit, @post), :comment_header_format=>@comment_header_format, :comment_date_format=>@comment_date_format)), :class=>"comments") if @comments.present? && @show_comments
       end
       result
    end
end %>
<% if can? :edit, @post %>
<%= content_tag(:ul, :id=>"blog_edit_application_menu", :class=>"application_menu") do
    content_tag(:li) do
        content_tag(:a, :rel=> edit_blog_post_path(@post), :form=>"") do
            content_tag(:span, "", "aria-hidden"=>"true", :class=>"menu-icon icon-pencil")+content_tag(:span, "Edit Post", :class=>"top_menu_text")
        end
    end +
    content_tag(:li) do
        content_tag(:a, :id=>"delete_post_app") do
            content_tag(:span, "", "aria-hidden"=>"true", :class=>"menu-icon icon-remove")+content_tag(:span, "Delete Post", :class=>"top_menu_text")
        end
    end +
    content_tag(:li) do
        content_tag(:a, :id=>"post_status_app", :class=>".post_status", :post_status=>@post.post_status) do
            content_tag(:span, "", "aria-hidden"=>"true", :class=>"menu-icon icon-post-status")+content_tag(:span, "", :class=>"post_status_visibility top_menu_text")
        end
    end +
    content_tag(:li, :class=>"post_moderate_menu comment_permission_#{@post.comment_permissions}") do
        content_tag(:span, "", "aria-hidden"=>"true", :class=>"menu-icon icon-bubbles")+content_tag(:span, "Comments", :class=>"top_menu_text") +
        content_tag(:ul, :class=>"moderate_options") do
            Roxiware::Blog::Post::ALLOWED_COMMENT_PERMISSIONS.collect do |permission|
                current_perm = "selected_item" if @post.comment_permissions == permission
                content_tag(:li, :class=>"comment_permission") do
                    content_tag(:a, :id=>permission, :class=>current_perm) do
                        content_tag(:span, "", :class=>"icon-checkmark menu-icon") + content_tag(:span, permission.titleize)
                    end
                end
            end.join("").html_safe
        end
    end
end %>
<%= render :partial=>"roxiware/blog/post/context_menus" %>
<% end %>

<script>
$(document).ready(function() {
<% if can? :delete, @post %>
    $("#delete_post_app").click(function() {
        $(".post").trigger("context_menu", "delete_post");
    });
<% end %>
var csrf_token = $('meta[name="csrf-token"]').attr('content');
var csrf_param = $('meta[name="csrf-param"]').attr('content');

<% if @show_comments && can?(:comment, @post) %>
    var root_comment_form = $(".comment_form");
    root_comment_form.attr("id", "root_form");
    
    initCommentForm("<%= comment_index_path %>.json", <%= @post.id %>, "Roxiware::Blog::Post");

    /* Move the comment form when comment_reply is clicked */ 
    $("a.comment_reply").click(function() {
        var parent_id = $(this).parents("[comment_id]").attr("comment_id");
        var form_div = $(".comment_form");
        form_div.attr("id", "reply_to_"+parent_id);
        form_div.find("input[name=parent_id]").val(parent_id);
        $(this).after(form_div);
        resetCommentForm();
     });

<% end %>

<% if can? :edit, @post %>
    $("#post_status_app").click(function() {
        $(".post .post_status a").click();
    });

    $(".post").bind("status_changed", function() {
console.log("status changed");
        $("#post_status_app").attr("post_status", $(this).attr("post_status"));
    });

    $(".manage_comment").each(function(index, menu) {
	ddsmoothmenu.init({
	    mainmenuid: $(this).attr("id"),
            rightalign: true,
	    orientation: 'h',
	    classname: 'manage_menu',
	    contentsource: "markup"
	});
    });

    /* handle comment permissions */
    $(".post_moderate_menu .comment_permission a").click(function(e) {
        e.stopPropagation();
        var self = $(this);
        var old_perm = $(".post_moderate_menu .comment_permission").attr("id");
        if(self.is(".selected_item")) { return; }
        var post = self.parents(".post");
        var upload_params = {blog_post:{comment_permissions:self.attr("id")}};
        if (csrf_param !== undefined && csrf_token !== undefined) {
            upload_params[csrf_param] = csrf_token;
        };
       $.ajax("<%= blog_post_path(@post.id) %>.json", {
           type:"PUT",
	   data: upload_params,
           dataType: "json",
	   error: function (jqXHR, textStatus, errorThrown) {
	       $.alert(errorThrown);
           },
           success: function() {
             $(".post_moderate_menu .comment_permission a").removeClass("selected_item");
             self.addClass("selected_item");
             $(".post_moderate_menu")<%= Roxiware::Blog::Post::ALLOWED_COMMENT_PERMISSIONS.collect{|permission| ".removeClass('comment_permission_#{permission}')"}.join("").html_safe %>;
             $(".post_moderate_menu").addClass("comment_permission_"+self.attr("id"));
           }
	});
    });


    /* Handle publish/hide */
    $(".post_publish_menu .hide_comment").click(function() {
        if($(this).parent().is(".selected_item")) {
            return;
        }
        var manage_comment = $(this).parents("[comment_id]").first();
        var self = $(this);
        var comment_id = manage_comment.attr("comment_id");
        var upload_params = {comment_status:$(this).is(".publish_comment")?"publish":"moderate"};
        if (csrf_param !== undefined && csrf_token !== undefined) {
            upload_params[csrf_param] = csrf_token;
        };

	$.ajax("/comment/"+comment_id+".json", {
		type:"PUT",
                data: upload_params,
	       error: function(xhr, textStatus, errorThrown) {
	                  $.error(errorThrown);
		      },
	       complete: function() {
		       },
	       success: function(data) {
			    if(data["error"]) {
			        $(data["error"]).each(function(index, value) {
				    $.error(value[1])
				    comment_form.find("input#"+value[0]).css("background", "#ffcccc");
			        });
			    }
			    else {
                                manage_comment.find(".manage_menu .publish_comment, .manage_menu .hide_comment").parent().toggleClass("selected_item");
                                manage_comment.find(".comment_moderate_indicator").first().toggleClass("comment_status_publish").toggleClass("comment_status_moderate");
		            }
                        }

        });
    });

    /* Handle delete */
    $(".manage_comment .delete_comment").click(function() {
        var blog_comment_id = $(this).parents("[comment_id]").attr("comment_id");
        var delete_params = {}
        if (csrf_param !== undefined && csrf_token !== undefined) {
            delete_params[csrf_param] = csrf_token;
        };
	$.ajax("<%= comment_index_path %>/"+blog_comment_id+".json", {
	       type:"DELETE",
               data: delete_params,
	       error: function(xhr, textStatus, errorThrown) {
	                  $.error(errorThrown);
		      },
	       complete: function() {
		       },
	       success: function(data) {
			    if(data["error"]) {
			        $(data["error"]).each(function(index, value) {
				    $.error(value[1])
				    comment_form.find("input#"+value[0]).css("background", "#ffcccc");
			        });
			    }
			    else {
			        window.location.reload();
		            }
                        }
        });
    });
<% end %>
});
</script>
<%= render :partial=>"roxiware/blog/post/post_manage_control" %>
