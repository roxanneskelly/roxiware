<script type="text/javascript" src="http://www.google.com/recaptcha/api/js/recaptcha_ajax.js"></script>
<script type="text/javascript">
    var RecaptchaOptions = {
	theme : 'custom',
	custom_theme_widget: 'recaptcha_widget'
    };
</script>
<script type="text/javascript"	src="http://www.google.com/recaptcha/api/challenge?k=<%= AppConfig.recaptcha_public_key %>"></script>
<%= content_tag(:div, :id=>"root_form", :class=>"comment_form") do
    content_tag(:form) do
       hidden_field_tag(:parent_id, 0) +
       hidden_field_tag(:root_id, 0) +
       hidden_field_tag(:root_type, "") +
       (raw(additional_fields) if additional_fields.present?) +
       content_tag(:div,  :id=>"comment_form_core") do 
           content_tag(:div, :id=>"comment_form_core_left") do
               tag(:img, :id=>"comment_author_image", :class=>"comment_author_image", :src=>(user_signed_in? ? current_user.person.thumbnail : default_image_path(:person, :thumbnail))) +
               if !user_signed_in?
                   content_tag(:div, "", :id=>"comment_author_name") +
		   content_tag(:div, :id=>"social_network_login", :style=>"display:none") do
		       content_tag(:a, "", :id=>"facebook_login", :provider=>"facebook") +
		       content_tag(:a, "", :id=>"twitter_login", :provider=>"twitter")
                   end +
		   content_tag(:a, "", :id=>"social_network_logout", :style=>"display:none")
               else
                   content_tag(:div, current_user.person.full_name, :id=>"comment_author_name")
               end
           end +
           content_tag(:div, text_area_tag(:comment_content, nil, :class=>"settings_wysiwyg"), :id=>"comment_form_content", :class=>"settings_wysiwyg") +
           hidden_field_tag(:comment_author_authtype, "generic")
       end +
       content_tag(:div, :id=>"anonymous_author", :style=>"display:none") do
           content_tag(:div, :id=>"anonymous_author_info") do
	       content_tag(:div) do
                   label_tag(:comment_author, "Name", :class=>"comment_author") +
		   text_field_tag(:comment_author, "", :class=>"comment_author", :watermark=>"Required")
               end +
	       content_tag(:div) do
                   label_tag(:comment_author_url, "URL", :class=>"comment_form_author_url") + 
		   text_field_tag(:comment_author_url, nil, :class=>"comment_form_author_url", :watermark=>"Optional")
               end +
               content_tag(:div) do 
		   label_tag(:comment_author_email, "Email", :class=>"comment_form_author_email") + 
		   text_field_tag(:comment_author_email, nil, :class=>"comment_form_author_email", :watermark=>"Required.  Not visible.") 
               end
	   end +
	   content_tag(:div, :id=>"comment_recaptcha", :class=>"comment_recaptcha", :style=>"display:none") do
	       content_tag(:div, "", :id=>"recaptcha_image", :class=>"recaptcha_image") +
	       content_tag(:div, "Incorrect, please try again", :class=>"recaptcha_only_if_incorrect_sol") +
	       content_tag(:div, "", :class=>"captcha_reload", :onclick=>"Recaptcha.reload()") +
	       content_tag(:div, "", :class=>"captcha_audio recaptcha_only_if_image", :onclick=>"Recaptcha.switch_type('audio')") +
	       content_tag(:div, "", :class=>"captcha_image recaptcha_only_if_audio", :onclick=>"Recaptcha.switch_type('image')") +
	       content_tag(:div, "", :class=>"captcha_help", :onclick=>"Recaptcha.showhelp()") +
	       text_field_tag(:recaptcha_response_field, "", :class=>"recaptcha_response_field", :id=>"recaptcha_response_field", :watermark=>"Type the two verification words.")
	   end
       end +
       content_tag(:div, :id=>"post_controls", :style=>"display:none") do
           button_tag("Post", :id=>"post_comment", :class=>"post_comment_button", :type=>"button", :disabled=>"disabled")
       end
    end
end 
%>
<script>
    var initialized = false;
    var comment_form=$(".comment_form");
    var auth_controls_shown = false;
    var showAuthControls = function() {
        if(auth_controls_shown) {
            return;
        }
        auth_controls_shown = true;
        comment_form.find("#post_controls").css("display","block");
<% if user_signed_in? %>
        comment_form.find("button.post_comment_button").button("enable");
<% else %>
      $.oAuthCheckLoggedIn();
<% end %>
    };
    var setLoginState = function(auth_info) {
        if(!auth_info) {
            if(!auth_controls_shown) {
                return;
            }
            comment_form.find("#anonymous_author").css("display","block");
	    comment_form.find("#social_network_login").css("display","block");
	    comment_form.find("#social_network_logout").css("display","none");
	    var comment_form_class = comment_form.find("#comment_form_core").attr("class");
	    if(comment_form_class) {
		var match = comment_form.find("#comment_form_core").attr("class").match(/\w*(.*_user)(\w|$)/);
		if (match) {
		    console.log("match");
		    comment_form.find("#comment_form_core").removeClass(match[0]);
		}
	    }
            comment_form.find("#comment_author_name").text("");
            comment_form.find("#comment_author_image").attr("src", "<%= default_image_path(:person, :thumbnail) %>");
            comment_form.find("#comment_author_authtype").val("generic");
            comment_form.find("button.post_comment_button").require_fields("input.comment_author, input.comment_author_email, input.recaptcha_response_field");
        }
        else {
	    /* If we're logged in to facebook or twitter, remove the 'login' buttons, as well as
	       the anonymous auth controls */
            auth_controls_shown = true;

	    comment_form.find("#social_network_login").css("display","none");
	    comment_form.find("#social_network_logout").css("display","block");
	    comment_form.find("#comment_author_image").attr("src", auth_info.thumbnail_url);
	    comment_form.find("#comment_author_name").text(auth_info.full_name);
	    comment_form.find("#comment_author_authtype").val(auth_info.auth_kind);
	    comment_form.find("#anonymous_author").css("display","none");
	    comment_form.find("#social_network_logout > div").css("display","none");
	    comment_form.find("#comment_form_core").addClass(auth_info.auth_kind+"_user");
	    comment_form.find("button.post_comment_button").button("enable");
        }
    }

    var resetCommentForm = function() {
       if(initialized) {
           
           $(comment_form).find("textarea").tinymce().remove();
       }
       initialized = true;
       $(comment_form).find("textarea").tinymce({
		      script_url:"http://cdn.roxiware.com/tools/tinymce/tinymce.min.js",
		      theme: "modern",
		      skin: "light",
		      menubar: false,
		      browser_spellcheck:true,
		      relative_urls: false,
		      remove_script_host:true,
		      document_base_url: window.location.protocol+'//'+window.location.hostname+(window.location.port ? ':'+window.location.port: ''),
		      plugins: [
		          "autolink lists link anchor",
			  "visualblocks image media",
                          "table paste autoresize"
		      ],
		      height: $("div.settings_wysiwyg").height() - 30,
                      autoresize_min_height:140,
		      style_formats : [
				{title: 'Headers', items: [
					{title: 'Header 1', format: 'h1'},
					{title: 'Header 2', format: 'h2'},
					{title: 'Header 3', format: 'h3'},
					{title: 'Header 4', format: 'h4'},
					{title: 'Header 5', format: 'h5'},
					{title: 'Header 6', format: 'h6'}
				]},

				{title: 'Inline', items: [
					{title: 'Bold', icon: 'bold', format: 'bold'},
					{title: 'Italic', icon: 'italic', format: 'italic'},
					{title: 'Underline', icon: 'underline', format: 'underline'},
					{title: 'Strikethrough', icon: 'strikethrough', format: 'strikethrough'},
					{title: 'Superscript', icon: 'superscript', format: 'superscript'},
					{title: 'Subscript', icon: 'subscript', format: 'subscript'},
					{title: 'Code', icon: 'code', format: 'code'}
				]},

				{title: 'Blocks', items: [
					{title: 'Paragraph', format: 'p'},
					{title: 'Blockquote', format: 'blockquote'},
					{title: 'Pre', format: 'pre'}
				]},

				{title: 'Alignment', items: [
					{title: 'Left', icon: 'alignleft', format: 'alignleft'},
					{title: 'Center', icon: 'aligncenter', format: 'aligncenter'},
					{title: 'Right', icon: 'alignright', format: 'alignright'},
					{title: 'Justify', icon: 'alignjustify', format: 'alignjustify'}
				]}
			],
                        setup : function(ed) {
                            ed.on('focus',showAuthControls);
			 },
		      statusbar:false,
		      resize:false,
		      schema: "html5",
		      toolbar: "styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist | link image media",
			      });
		
    }

    var initCommentForm = function(comment_path, comment_root_id, comment_root_type) {
       var comment_form=$(".comment_form");
       comment_form.find("input[name=root_type]").val(comment_root_type);
       comment_form.find("input[name=root_id]").val(comment_root_id);
       comment_form.find("button").button();

       <% if !user_signed_in? %>
           var recaptcha_init = false;
           comment_form.find("input#comment_author, input#comment_author_email, input#comment_author_url").bind("input propertychange", function() {
                 if(!recaptcha_init) {
                     recaptcha_init=true;
	             Recaptcha.destroy();
	             Recaptcha.create("<%= AppConfig.recaptcha_public_key %>",
			      "comment_recaptcha",
			      {
				  theme: "custom",
				  callback: function() {$(comment_form).find("#recaptcha_response_field").blur(); }
			      }
	             );
                 }
           });

           $("a#facebook_login").data("oauth_state", "<%= Roxiware::AuthHelpers::AuthState.new({:auth_kind=>'facebook', :proxy=>true, :host_with_port=>request.host_with_port}).get_state %>");
           $("a#twitter_login").data("oauth_state", "<%= Roxiware::AuthHelpers::AuthState.new({:auth_kind=>'twitter', :proxy=>true, :host_with_port=>request.host_with_port}).get_state %>");
           $("a#facebook_login, a#twitter_login").click(function() {
               $.oAuthLogIn($(this).attr("provider"), $(this).data("oauth_state"));
	});
       $("a#social_network_logout").click(function() {
           $.oAuthResetLogin();
       });
       <% end %>

       $(comment_form).find("input[watermark]").watermark();
       resetCommentForm();

        $("body").bind("oauth_login", function(e, auth_info) {
            setLoginState(auth_info);
        });

<% if !user_signed_in? %>
      $.oAuthCheckLoggedIn();
<% end %>
       comment_form.find("button.post_comment_button").unbind("click");
       comment_form.find("button.post_comment_button").click(function() {
           comment_form.find("input.watermark").val("");
           $.ajaxSetParamsJSON(comment_path, jQuery.param($(this).parents("form").serializeArray()), {method:"POST",
               error:function(data) {
                   $(data).each(function(index, value) {
                       if(value[0] == "ext_oauth_token") {
                           $.oAuthResetLogin();
                       }
                  });
               },
               success:function(data) {
                   if(data["comment_status"] == "publish") {
                       if(data["completion_redirect"]) {
                           window.location = data["completion_redirect"];
                       }
                       else {
                           window.location.reload();
                       }
                   }
                   else {
                       $.notice("Your comment will be posted after it's reviewed", {
                           onClose: function() {
                               window.location.reload();
                           }
                       });
                   }
               }
           });
        });
    }

</script>
