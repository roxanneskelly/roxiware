<script>
  window.fbAsyncInit = function() {
    // init the FB JS SDK
    FB.init({
      appId      : '<%= AppConfig.facebook_app_id %>',                        // App ID from the app dashboard
      channelUrl : '//www.everjane.com/channel.html', // Channel file for x-domain comms
      status     : true,                                 // Check Facebook Login status
      xfbml      : true                                  // Look for social plugins on the page
    });

    // Additional initialization code such as adding Event Listeners goes here
  };

  // Load the SDK asynchronously
  (function(d, s, id){
     var js, fjs = d.getElementsByTagName(s)[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement(s); js.id = id;
     js.src = "//connect.facebook.net/en_US/all.js";
     fjs.parentNode.insertBefore(js, fjs);
   }(document, 'script', 'facebook-jssdk'));
</script>
<script type="text/javascript" src="http://www.google.com/recaptcha/api/js/recaptcha_ajax.js"></script>
<script type="text/javascript">
    var RecaptchaOptions = {
	theme : 'custom',
	custom_theme_widget: 'recaptcha_widget'
    };
</script>
<script type="text/javascript"	src="http://www.google.com/recaptcha/api/challenge?k=<%= AppConfig.recaptcha_public_key %>"></script>
<div id="root_form" class="comment_form" comment_author_auth="generic">
    <form>
       <%= hidden_field_tag :parent_id, 0 %>
       <%= hidden_field_tag :root_id, 0 %>
       <%= hidden_field_tag :root_type, "" %>
       <%= raw additional_fields if additional_fields.present? %>
       <%= content_tag("div",  :id=>"comment_form_core") do 
               tag(:img, :id=>"comment_author_image", :class=>"comment_author_image", :src=>(user_signed_in? ? current_user.person.thumbnail_url : default_image_path(:person, :thumbnail))) +  " " +
               content_tag(:div, text_area_tag(:comment_content, nil, :class=>"settings_wysiwyg"), :id=>"comment_form_content", :class=>"settings_wysiwyg&#19;") +
               hidden_field_tag(:comment_author_authtype, "generic") +
               hidden_field_tag(:comment_author_auth_token, nil)
          end %>
       <% if user_signed_in? %>
            <%= button_tag "Post", :id=>"post_comment", :class=>"post_comment_button", :type=>"button" %>
       <% else %>
           <%= content_tag(:div, :id=>"comment_auth") do 
	       content_tag(:div, :id=>"anonymous_author_info") do
                  label_tag(:comment_author, "Name", :class=>"comment_author") + " " +
                  text_field_tag(:comment_author, "", :class=>"comment_author", :watermark=>"Required") +
	          label_tag(:comment_author_url, "URL", :class=>"comment_form_author_url") + " " +
                  text_field_tag(:comment_author_url, nil, :class=>"comment_form_author_url", :watermark=>"Optional") +
	          label_tag(:comment_author_email, "Email", :class=>"comment_form_author_email") + " " +
                  text_field_tag(:comment_author_email, nil, :class=>"comment_form_author_email", :watermark=>"Required.  Not visible.") 
               end +
               content_tag(:div, :id=>"social_network_login") do 
	           content_tag(:a, "", :id=>"facebook_login", :provider=>"facebook") +
                   content_tag(:a, "", :id=>"twitter_login", :provider=>"twitter")
               end +
               content_tag(:div, :id=>"comment_recaptcha", :class=>"comment_recaptcha", :style=>"display:none") do %>
		   <div id="recaptcha_image" class="recaptcha_image"></div>
		   <div class="recaptcha_only_if_incorrect_sol">Incorrect please try again</div>
		   <div class="captcha_reload" onclick="Recaptcha.reload()"></div>
		   <div class="captcha_audio recaptcha_only_if_image" onclick="Recaptcha.switch_type('audio')"></div>
		   <div class="captcha_image recaptcha_only_if_audio" onclick="Recaptcha.switch_type('image')"></div>
		   <div class="captcha_help" onclick="Recaptcha.showhelp()"></div>
		   <input type="text" class="recaptcha_response_field" id="recaptcha_response_field" name="recaptcha_response_field" watermark="Type the two verification words." />
               <% end
           end %>
	   <%= button_tag "Post", :id=>"post_comment", :class=>"post_comment_button", :type=>"button", :disabled=>"disabled" %>
        <% end %>
    </form>
</div>
<script type="text/template" id="social_networks_info">
<div id="social_network_login"><div id="comment_author_name"></div></div>
</script>
<script>
    var initCommentForm = function(comment_path, comment_root_id, comment_root_type) {
       var comment_form=$(".comment_form");
       comment_form.find("input[name=root_type]").val(comment_root_type);
       comment_form.find("input[name=root_id]").val(comment_root_id);
       comment_form.find("button").button();

       <% if !user_signed_in? %>
           var recaptcha_init = false;
           comment_form.find("input#comment_author, input#comment_author_email, input#comment_author_url").bind("input propertychange", function() {
                 if(!recaptcha_init) {
                     recaptcha_init=true;
	             Recaptcha.destroy();
	             Recaptcha.create("<%= AppConfig.recaptcha_public_key %>",
			      "comment_recaptcha",
			      {
				  theme: "custom",
				  callback: function() {$(comment_form).find("#recaptcha_response_field").blur(); }
			      }
	             );
                 }
           });

           $("a#facebook_login").data("oauth_state", "<%= Roxiware::AuthHelpers::AuthState.new({:auth_kind=>'facebook', :proxy=>true, :host_with_port=>request.host_with_port}).get_state %>");
           $("a#twitter_login").data("oauth_state", "<%= Roxiware::AuthHelpers::AuthState.new({:auth_kind=>'twitter', :proxy=>true, :host_with_port=>request.host_with_port}).get_state %>");
           $("a#facebook_login, a#twitter_login").click(function() {

             var auth_type = $(this).attr("provider");
	     var data = {proxy:true,
                         params:{provider:auth_type,
                         oauth_state:$(this).data("oauth_state")},
                         onSuccess: function(response) {
                             if(response) {
                                 var social_networks_info = $($("#social_networks_info").text());
                                 comment_form.attr("comment_author_auth", auth_type);
                                 comment_form.find("#comment_author_image").attr("src", response.thumbnail_url);
                                 social_networks_info.find("#comment_author_name").text(response.full_name);
                                 comment_form.find("#comment_form_header").html(social_networks_info);
                                 comment_form.find("#comment_author_authtype").attr("value", response.auth_kind);
                                 comment_form.find("#comment_author_auth_token").attr("value", response.auth_token);
                                 comment_form.find("#comment_auth").remove();
                                 comment_form.find("button.post_comment_button").button("enable");
                             }
                          }};



	      if ($(this).attr("provider") == "facebook") {
		  FB.getLoginStatus(function(response) {
		      if (response.status != 'connected') {
			  // if facebook has disconnect, reset login so we throw up the UI
			  reset_login();
		      }
		      do_login(data);
		  });
	      }
	      else {
		  // do a direct facebook/twitter login to gather the auth token
		  do_login(data);
	      }
	});
       <% end %>

       $(comment_form).find("input[watermark]").watermark();

       $(comment_form).find("textarea").wysiwyg({ css: $.roxiware.main_css,
                                                    iFrameClass:"wysiwyg_iframe",
			                            initialContent:"",
                                                    controls: {
                                                        insertImage: { visible: false},
                                                        undo: { visible: false },
                                                        redo: { visible: false},
                                                        unLink: { visible: false},
                                                        code: { visible: false},
                                                        insertHorizontalRule: { visible: false},
                                                        html: { visible: true},
                                                        fileManager: { visible:false }
                                                    }});
       comment_form.find("button.post_comment_button").require_fields("input.comment_author, input.comment_author_email, input.recaptcha_response_field");
       comment_form.find("textarea#comment_content").focus();

       comment_form.find("button.post_comment_button").click(function() {
           comment_form.find("input.watermark").val("");
           $.ajaxSetParamsJSON(comment_path, jQuery.param($(this).parents("form").serializeArray()), {method:"POST",
               success:function(data) {
                   if(data["comment_status"] == "publish") {
                       window.location.reload();
                   }
                   else {
                       $.notice("Your comment will be posted after it's reviewed", {
                           onClose: function() {
                               window.location.reload();
                           }
                       });
                   }
               }
           });
        });
    }

</script>
