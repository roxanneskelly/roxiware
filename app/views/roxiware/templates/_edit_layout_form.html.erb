<% if @layout.id.present?
   method="PUT"
   endpoint = "#{layout_path(@layout.guid)}.json";
 else
   method="POST"
   endpoint = "#{layout_index_path}.json?clone=#{@clone_id}";
end %>

<div class="layout_edit_form large_form" id="layout_edit_form">
   <%= form_for @layout, :as=>:layout, :url=> endpoint, :method=>method do |layout_form|%>   
     <%= layout_form.hidden_field :guid %>
     <div class="tab_form">
       <ul class="tabs">
	 <li><a href="#">General</a></li>
	 <li><a href="#">Schemes</a></li>
	 <li><a href="#">Style</a></li>
	 <li><a href="#">Setup</a></li>
       </ul>
       <div class="panes">
	 <div id="general_pane">
	   <div id="layout_name"><%= layout_form.label :name, "Name"%><%= layout_form.text_field :name %></div>
	   <%= layout_form.fields_for :params do |fields_for_params| %>
	     <div id="layout_chooser_image">
		 <span class="popup_help_text" style="float:right;">Click to change image</span><br/>
		 <img id="layout_image_upload" class="upload_target" src="<%= @layout.get_param('chooser_image').to_s %>" />
	     </div>
	     <div class="description_pos"><div class="settings_wysiwyg"><%= layout_form.text_area :description %></div></div>
	     <div id="template_settings_box" class="list_box"><div id="template_settings" class="list_box_content">
	          <%= layout_form.label :category_csv, "Categories"%><%= layout_form.text_field :category_csv %>
		  <% @params.each do |param| %>
		      <%= param_field(fields_for_params, param) %>
		  <% end %>
		  <%= layout_form.fields_for :param_descriptions do |param_description_fields| %>
		      <% @param_descriptions.each do |param_name, param_description| %>
		         <%= param_description_fields.hidden_field param_name, :value=>param_description %>
		      <% end %>
		  <% end %>
		  <%= layout_form.fields_for :param_classes do |param_class_fields| %>
		      <% @params.each do |param| %>
		         <%= param_class_fields.hidden_field param.name, :value=>param.param_class %>
		      <% end %>
		  <% end %>
	     </div></div>
	   <% end %>
	 </div>
	 <div id="schemes_pane">
	   <div id="scheme_list_box" class="list_box">
	       <div id="scheme_list" class="list_box_content">
		 <% (@schemes || {}).each do |scheme_id, scheme| %>
		     <div class="layout_scheme list_box_item" id="<%= scheme_id %>">
		       <img class="scheme_thumbnail" src="<%= scheme[:thumbnail_image] %>" scheme_id="<%= scheme_id %>">
		       <div class="layout_scheme_title"><%= scheme[:name] %></div>
		     </div>
		 <% end %>
	       </div>
               <div class="edit_bar"><div id="clone_scheme" class="edit_bar_button" title="Clone a Scheme">+</div><div id="delete_scheme" class="edit_bar_button" title="Remove a Scheme">-</div></div>
	   </div>
	   <div id="scheme_forms">
	      <%= layout_form.fields_for :template_params do |template_param_fields| %>
	          <%= template_param_fields.hidden_field :chooser_image, :value=>@layout.get_param("chooser_image").to_s %>
	      <% end %>
		  <%= layout_form.fields_for :schemes do |schemes_fields| %>
		     <% (@schemes || {}).each do |scheme_id, scheme| %>
			<div class="scheme_form" id="<%=scheme_id %>">
			   <%= schemes_fields.fields_for scheme_id.to_sym do |fields_for_scheme| %>
			      <div class="scheme_top_block">
				<div id="scheme_name"><%= fields_for_scheme.label :name, "Name"%><%= fields_for_scheme.text_field :name, :value=>scheme[:name], :class=>"scheme_name_field", :scheme_id=>scheme[:id] %></div> 
				<img class="upload_target scheme_thumbnail" src="<%= scheme[:thumbnail_image] %>" scheme_id="<%= scheme_id %>"/>
			      <%= fields_for_scheme.hidden_field :thumbnail_image, :value=>scheme[:thumbnail_image], :class=>"thumbnail_url" %></div>

			      <br/>
			      <div class="scheme_params list_box">
	                        <div id="scheme_list" class="list_box_content">
				  <%= fields_for_scheme.fields_for :params do |param_fields| %>
				      <% scheme[:params].sort().collect{|scheme_dup| scheme_dup[1]}.each do |param| %>
					 <%= param_field(param_fields, param ) %>
				      <% end %>
				  <% end %>
				  <%= layout_form.fields_for :param_descriptions do |param_description_fields| %>
				      <% scheme[:params].collect{|scheme_dup| scheme_dup[1]}.each do |param| %>
					 <%= param_description_fields.hidden_field param.name, :value=>param.description_guid %>
				      <% end %>
				  <% end %>
				</div>
			      </div>
			      <div class="scheme_large_images">
				<div class="scheme_large_image_panes">
				  <% (scheme[:large_images] || []).each do |large_image_pair| %>
				     <div><img src="<%=large_image_pair[:thumbnail] %>"/><div class="scheme_large_image_delete">x</div></div>
				  <% end %>
				</div>
				<div class="scheme_large_image_tabs">
				  <% if scheme[:large_images].present? %>
				     <% for index in 1..(scheme[:large_images].length) %>
					 <a class="layout_image_block_tab"><%=index%></a>
				     <% end %>
				  <% end %>
				</div>
			      </div>
			   <% end %>
		       </div>
	         <% end %>
	      <% end %>
	   </div>
	 </div>
	 <div id="style_pane">
	    <%= layout_form.text_area :style, :class=>"layout_style" %>
	 </div>
	 <div id="setup_pane">
	    <%= layout_form.text_area :setup, :class=>"layout_setup" %>
	 </div>
       </div>
       </div>
	<% if @layout.id.present? %>
           <%= button_tag "Save", :id=>"save_button", :type=>"button" %>
	<% end %>
       <%= button_tag "Save and Close", :id=>"save_and_close_button", :type=>"button", :class=>"save_button" %>
   <% end %>
</div>
<script>
   $(function() {
      var config_large_image_tabs = function(self) {
          var tabs_api = self.find(".scheme_large_image_tabs").data("tabs");
          if(tabs_api) {
             tabs_api.destroy();
          }
          self.find(".scheme_large_image_tabs .layout_image_block_tab").remove();
          self.find(".scheme_large_image_tabs input").remove();
          self.find(".scheme_large_image_panes > div").each(function(index, image) {
              var input_template = self.find("input.template_large_image").clone();
              input_template.attr("id", input_template.attr("id")+"_"+(index+1));
              input_template.attr("name", input_template.attr("name")+"["+(index+1)+"]");
              input_template.val($(image).find("img").attr("src"));
              input_template.removeClass("template_large_image");

              self.find(".scheme_large_image_tabs .scheme_large_image_add").before("<a class='layout_image_block_tab'>"+(index+1)+"</a>");
              self.find(".scheme_large_image_tabs").append(input_template);
	   });
     }
      $("#layout_edit_form ul.tabs").tabs($("div.panes > div"));

      /* setup schemes.  This is done on start, or when we add or delete a scheme */
      var initSchemes = function() {
          var tabs_api = $("#scheme_list").data("tabs");
          if(tabs_api) {
             tabs_api.destroy();
          }
          /* Enable tabs in the scheme list, bringing up each scheme form */
	  $("#scheme_list").tabs($("#scheme_forms > div"), 
	      {
		  current:"list_box_item_selected"
	  });


	  $("#scheme_forms .scheme_form .scheme_large_images").each(function(index, form) {
             $(form).find(".scheme_large_image_tabs").tabs($(form).find(".scheme_large_image_panes > div"), {tabs:"a.layout_image_block_tab"});
	  });

	   $("input.scheme_name_field").bind("input blur propertychange", function() {
	       var scheme_id = $(this).parents(".scheme_form").attr("id");
	       $("#"+scheme_id+".layout_scheme .layout_scheme_title").text($(this).val());
	   });

	   $(".layout_edit_form img.scheme_thumbnail").bind("click", function() {
	     var self=this;
	     imageDialog({
		  initialImage: $(this).attr("src"),
		  previewSize:"thumbnail",
		  uploadParams:{
		    imageSizes: {
		       thumbnail:  {width:32, height:32}
		    }
		  },
		  sizeLimit: 10000000,
		  onSuccess: function(upload_result){
		      var scheme_form = $(self).parents(".scheme_form");
		      $(scheme_form).find("input.thumbnail_url").val(upload_result["urls"]["thumbnail"]);
		      $("img[scheme_id="+scheme_form.attr("id")+"]").attr("src", upload_result["urls"]["thumbnail"]);
		  }});
	    });
      };


       $("div#delete_scheme").click(function() {
            var current_selected_scheme = $("#scheme_list_box .list_box_item_selected");
            var scheme_guid = current_selected_scheme.attr("id");

            current_selected_scheme.remove();
            $("#scheme_forms > div#" + scheme_guid).remove();

            initSchemes();

       });
       $("div#clone_scheme").click(function() {
            var current_selected_scheme = $("#scheme_list_box .list_box_item_selected");
            var old_guid = current_selected_scheme.attr("id");
            var cloned_scheme = current_selected_scheme.clone();
            var scheme_guid = genUUID();
            cloned_scheme.attr("id", scheme_guid);
            var names = [];
            $("#scheme_list_box .list_box_item_selected .layout_scheme_title").each(function(index, name) {
                names.push($(name).text());
            });

            var scheme_name = getNextUniqueName(cloned_scheme.find(".layout_scheme_title").text(), names);
            cloned_scheme.find(".layout_scheme_title").text(scheme_name);
            $("#scheme_list").append(cloned_scheme);
            current_selected_scheme.removeClass("list_box_item_selected");
            var scheme_form = $("#scheme_forms > div#" + current_selected_scheme.attr("id")).clone();
            scheme_form.find("input.scheme_name_field").val(scheme_name);
            scheme_form.attr("id", scheme_guid);
            scheme_form.find("input,select").each(function(index, input_object) {
                $(input_object).attr("id", $(input_object).attr("id").replace(old_guid, scheme_guid));
                $(input_object).attr("name", $(input_object).attr("name").replace(old_guid, scheme_guid));
            });
            scheme_form.find("[scheme_id]").each(function(index, input_object) {
                $(input_object).attr("scheme_id", scheme_guid);
            });
            $("#scheme_forms").append(scheme_form);
            initSchemes();
	    var tabs_api = $("#scheme_list").data("tabs");
	    if(tabs_api) {
	       tabs_api.click(-1);
	    }
       });



      $("img#layout_image_upload").bind("click", function() {
        imageDialog({
	     initialImage: "<%= @layout.get_param('chooser_image').to_s %>",
             previewSize:"thumbnail",
             uploadParams:{
               imageSizes: {
                  thumbnail:  {width:120, height:120}
               }
             },
             sizeLimit: 10000000,
	     onSuccess: function(upload_result){
                 $("input#layout_params_chooser_image").val(upload_result["urls"]["thumbnail"]);
                 $("#layout_chooser_image img").attr("src", upload_result["urls"]["thumbnail"]);
             }});
       });


       $("#save_button,#save_and_close_button").click(function() {
           $("input.template_large_image").remove();
	   $.ajax({
	       url:"<%= endpoint %>",
	       type:"<%= method %>",
               dataType: "json",
               processData:true,
	       data:jQuery.param($("form").serializeArray()),
               error: function (jqxhr, errorText, errorThrown) {
                 $.error(errorText + " " + errorThrown)
               },
	       success:function(data, textStatus, jqxhr) {
                  if(data["error"]) {
                      $(data["error"]).each(function(index, value) {
                         $.error(value[0]+":"+value[1])
                      })
                  }
                  else if($(this).is("#save_and_close_button")) {
		      window.location.reload();
                  }
	       }
	   });         
       });

       initSchemes();
   });
</script>
