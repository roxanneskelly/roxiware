require 'omniauth'
require 'net/http'
module OmniAuth
    module Strategies


        # Authproxy performs proxy logins, as various providers require that
	# the callback URI be on a registered server.  It's untenable that
	# we add a registraion for each of the customer sites.
	# It performs all of the initial work to get the appropriate 'tokens'
	# used to log in, as well as gathering some user information
	# It should also do some cross-site checking, to validate
	# the requesting site is a scribaroo site.
        class Authproxy
	    include OmniAuth::Strategy
	    option :auth_server, nil

	    info do 
	       {'login_url' => @login_url, 'auth_kind'=>@auth_kind}
            end

	    # Redirect to the UI on the auth server that throws up the appropriate login dialog
	    # The dialog will collect the appropriate information for the auth provider
	    # and will set up local cookies and such
	    def request_phase
	        case request.params["provider"]
		   when "facebook"
		       redirect  "http://www.facebook.com/dialog/oauth/?client_id=#{AppConfig.facebook_app_id}&state=#{request.params['oauth_state']}&redirect_uri=#{options.callback_server}&display=popup"
		   else
		end
	    end


	    # when callback happens, unpack 
            def callback_phase
	        # unpack the auth state.  The auth-state was generated by a scribaroo site,
		# so successful unpacking indicates that it is allowed
	        auth_state = ::Roxiware::AuthHelpers::AuthState.new(request.params["state"].to_s)
		# redirect_to "http:#{auth_state.host_with_port}/account/auth/#{kind.to_s}/callback"
		query = Rack::Utils.parse_query(URI(request.url).query)
		query.delete("state")

		if auth_state.blank?
		    puts "AUTH STATE BLANK"
		    return fail!(:invalid_credentials)
		end

		query["is_proxy"]=auth_state.proxy?
	        @auth_kind = auth_state.auth_kind
		@login_url = "http://#{auth_state.host_with_port}/account/auth/#{auth_state.auth_kind}/callback?"+query.collect{|query_val| query_val.join("=")}.join("&")
		super
	    end
	end
    end
end
